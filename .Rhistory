} else{
this_estimator = "matrix completion"
this_inference = "nonparametric"
}
start_year = as.numeric(start_year)
synth_dat <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year),
D = ifelse(treated ==1 & year >= start_year, 1, 0))%>%
rename(Y = outcome_var)%>%
select(ID, Y, D, year, my_predictors)
out_gsynth <- gsynth(Y ~ D
, data = synth_dat,
index = c("ID","year"),
force = f,
estimator = e,
CV = TRUE,
se = TRUE, nboots = 500, inference = this_inference,
parallel = FALSE,
seed = 0930
)
plot(out_gsynth)
if (outcome_var == "loss"){
these_results = out_gsynth$est.avg
} else{
these_results = out_gsynth$est.att %>%
as.data.frame()%>%
rownames_to_column(var = "year")%>%
filter(year == max(as.numeric(year)))
}
these_results <- these_results %>%
rename(se = "S.E.")%>%
select(ATT, se)%>%
mutate(project = project_name,
"fixed effects" = f,
"estimator" = this_estimator,
"synth_method" = "generalized SC")
results_gsynth <- rbind(results_gsynth, these_results)
}
}
return(results_gsynth)
}
apply_gsynth("admpl", 9)
apply_gsynth("florestal", 9)
apply_gsynth("agrocortex", 14)
e: Runs synthetic controls logic
library(tidyverse)
library(zoo)
library(tidyquant)
library(microsynth)
# NOTE: need to add function parameters for all the different things you can tweak for
# synthetic controls (i.e. all the different possible combinations of running it)
apply_microsynth <- function(project_name, start_year, outcome_var = "cum_loss", covariates = NULL) {
# load the dat_long table
load(paste0("data/processed/", project_name, "/dat_synth.Rdata"))
start_year = as.numeric(start_year)
synth_dat <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year),
D = ifelse(treated ==1 & year >= start_year, 1, 0))%>%
rename(Y = outcome_var)%>%
select(ID, Y, D, year, covariates)
results_microsynth <- data.frame()
for(covariate in covariates){
my_predictors <- covariates[covariates != covariate]
out_microsynth <- microsynth(as.data.frame(synth_dat),
idvar="ID", timevar="year", intvar="D",
start.pre=1,
end.pre=(start_year - 1),
end.post=22,
match.out="Y", match.covar=my_predictors,
result.var="Y",
test="two-sided",
perm=250, jack=FALSE
, check.feas=TRUE, use.backup=TRUE
)
results_microsynth <- out_microsynth$Results$`22` %>%
as.data.frame()%>%
mutate(project = project_name,
ATT = Trt - Con,
se = abs(ATT/qnorm(Perm.pVal)),
excluded_cov = covariate,
synth_method = "traditional SC")%>%
select(project, ATT, se, excluded_cov, synth_method)%>%
rbind(results_microsynth)
}
return(results_microsynth)
}
apply_microsynth("agrocortex", 14)
apply_microsynth("agrocortex", 14)
apply_microsynth("admpl", 9)
library(tidyverse)
library(zoo)
library(tidyquant)
library(microsynth)
# NOTE: need to add function parameters for all the different things you can tweak for
# synthetic controls (i.e. all the different possible combinations of running it)
apply_microsynth <- function(project_name, start_year, outcome_var = "cum_loss", covariates = NULL) {
# load the dat_long table
load(paste0("data/processed/", project_name, "/dat_synth.Rdata"))
start_year = as.numeric(start_year)
synth_dat <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year),
D = ifelse(treated ==1 & year >= start_year, 1, 0))%>%
rename(Y = outcome_var)%>%
select(ID, Y, D, year, covariates)
results_microsynth <- data.frame()
for(covariate in covariates){
my_predictors <- covariates[covariates != covariate]
out_microsynth <- microsynth(as.data.frame(synth_dat),
idvar="ID", timevar="year", intvar="D",
start.pre=1,
end.pre=(start_year - 1),
end.post=22,
match.out="Y", match.covar=my_predictors,
result.var="Y",
test="two-sided",
perm=250, jack=FALSE
, check.feas=TRUE, use.backup=TRUE
)
results_microsynth <- out_microsynth$Results$`22` %>%
as.data.frame()%>%
mutate(project = project_name,
ATT = Trt - Con,
se = abs(ATT/qnorm(Perm.pVal)),
excluded_cov = covariate,
synth_method = "traditional SC")%>%
select(project, ATT, se, excluded_cov, synth_method)%>%
rbind(results_microsynth)
}
return(results_microsynth)
}
apply_microsynth("agrocortex", 14)
library(here)
library(dplyr)
# Get list of all (project name, start year)
source(here('code', 'Projects', 'universal_list_of_projects.R'))
projects <- get_projects()
# Processing all the datasets:
source(here("code", "methods", "synthetic_controls", "synthetic_controls_processing.R"))
#projects = projects[1:2]
# Processing all the datasets:
# for (project in projects) {
#   print(project[1])
#   process_synth_data(project[1])
# }
source(here("code", "methods", "synthetic_controls", "microsynth_logic.R"))
source(here("code", "methods", "synthetic_controls", "gsynth_logic.R"))
covariates = c("treecover_2000",
"hillshade",
"aspect",
"elevation",
"slope"
# "accessibility
# "accessibility_walking_only"
)
synth_results <- data.frame()
gsynth_results <- data.frame()
for (project in projects) {
synth_results <- apply_microsynth(project[1], project[2], outcome_var = "cum_loss", covariates = covariates) %>%
rbind(synth_results)
gsynth_results <- apply_gsynth(project[1], project[2], outcome_var = "cum_loss", covariates = NULL, estimators = "ife")%>%
rbind(gsynth_results)
# augsynth_results <- apply_augsynth(project[1], project[2], outcome_var = "cum_loss", covariates = covariates)
}
# Author: Originally by Rachel, then modified by Albert (10/03/2023), and again by Henry (12/31/2023)
# Date: 12/31/2023 (most recent)
# Purpose: Runs synthetic controls logic
library(tidyverse)
library(zoo)
library(tidyquant)
library(microsynth)
# NOTE: need to add function parameters for all the different things you can tweak for
# synthetic controls (i.e. all the different possible combinations of running it)
apply_microsynth <- function(project_name, start_year, outcome_var = "cum_loss", covariates = NULL) {
# load the dat_long table
load(paste0("data/processed/", project_name, "/dat_synth.Rdata"))
start_year = as.numeric(start_year)
synth_dat <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year),
D = ifelse(treated ==1 & year >= start_year, 1, 0))%>%
rename(Y = outcome_var)%>%
select(ID, Y, D, year, covariates)
results_microsynth <- data.frame()
for(covariate in covariates){
my_predictors <- covariates[covariates != covariate]
out_microsynth <- microsynth(as.data.frame(synth_dat),
idvar="ID", timevar="year", intvar="D",
start.pre=1,
end.pre=(start_year - 1),
end.post=22,
match.out="Y", match.covar=my_predictors,
result.var="Y",
test="two-sided",
perm=250, jack=FALSE
, check.feas=TRUE, use.backup=TRUE
)
results_microsynth <- out_microsynth$Results$`22` %>%
as.data.frame()%>%
mutate(project = project_name,
ATT = Trt - Con,
se = abs(ATT/qnorm(Perm.pVal)),
excluded_cov = covariate,
synth_method = "traditional SC")%>%
select(project, ATT, se, excluded_cov, synth_method)%>%
rbind(results_microsynth)
}
return(results_microsynth)
}
library(here)
library(dplyr)
# Get list of all (project name, start year)
source(here('code', 'Projects', 'universal_list_of_projects.R'))
projects <- get_projects()
# Processing all the datasets:
source(here("code", "methods", "synthetic_controls", "synthetic_controls_processing.R"))
#projects = projects[1:2]
# Processing all the datasets:
# for (project in projects) {
#   print(project[1])
#   process_synth_data(project[1])
# }
source(here("code", "methods", "synthetic_controls", "microsynth_logic.R"))
source(here("code", "methods", "synthetic_controls", "gsynth_logic.R"))
covariates = c("treecover_2000",
"hillshade",
"aspect",
"elevation",
"slope"
# "accessibility
# "accessibility_walking_only"
)
synth_results <- data.frame()
gsynth_results <- data.frame()
for (project in projects) {
synth_results <- apply_microsynth(project[1], project[2], outcome_var = "cum_loss", covariates = covariates) %>%
rbind(synth_results)
gsynth_results <- apply_gsynth(project[1], project[2], outcome_var = "cum_loss", covariates = NULL, estimators = "ife")%>%
rbind(gsynth_results)
# augsynth_results <- apply_augsynth(project[1], project[2], outcome_var = "cum_loss", covariates = covariates)
}
covariates = c("treecover_2000",
"hillshade",
"aspect",
"elevation",
"slope"
# "accessibility
# "accessibility_walking_only"
)
apply_microsynth("agrocortex", 14, covariates)
covariates = c("treecover_2000",
"hillshade",
"aspect",
"elevation",
"slope"
)
apply_microsynth("agrocortex", 14, covariates)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
# Author: Originally by Rachel, then modified by Albert (10/03/2023), and again by Henry (12/31/2023)
# Date: 12/31/2023 (most recent)
# Purpose: Runs synthetic controls logic
library(tidyverse)
library(zoo)
library(tidyquant)
library(microsynth)
# NOTE: need to add function parameters for all the different things you can tweak for
# synthetic controls (i.e. all the different possible combinations of running it)
apply_microsynth <- function(project_name, start_year, outcome_var = "cum_loss", covariates = NULL) {
# load the dat_long table
load(paste0("data/processed/", project_name, "/dat_synth.Rdata"))
start_year = as.numeric(start_year)
synth_dat <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year),
D = ifelse(treated ==1 & year >= start_year, 1, 0))%>%
rename(Y = outcome_var)%>%
select(ID, Y, D, year, covariates)
results_microsynth <- data.frame()
for(covariate in covariates){
my_predictors <- covariates[covariates != covariate]
out_microsynth <- microsynth(as.data.frame(synth_dat),
idvar="ID", timevar="year", intvar="D",
start.pre=1,
end.pre=(start_year - 1),
end.post=22,
match.out="Y", match.covar=my_predictors,
result.var="Y",
test="two-sided",
perm=250, jack=FALSE
, check.feas=TRUE, use.backup=TRUE
)
results_microsynth <- out_microsynth$Results$`22` %>%
as.data.frame()%>%
mutate(project = project_name,
ATT = Trt - Con,
se = abs(ATT/qnorm(Perm.pVal)),
excluded_cov = covariate,
synth_method = "traditional SC")%>%
select(project, ATT, se, excluded_cov, synth_method)%>%
rbind(results_microsynth)
}
return(results_microsynth)
}
covariates = c("treecover_2000",
"hillshade",
"aspect",
"elevation",
"slope"
)
apply_microsynth("agrocortex", 14, covariates)
View(apply_microsynth)
apply_microsynth("agrocortex", 14, covariates)
# load the dat_long table
load(paste0("data/processed/", project_name, "/dat_synth.Rdata"))
# NOTE: need to add function parameters for all the different things you can tweak for
# synthetic controls (i.e. all the different possible combinations of running it)
project_name <- "agrocortex"
start_year <- 14
outcome_var <- "cum_loss"
covariates <- c("treecover_2000",
"hillshade",
"aspect",
"elevation",
"slope"
)
# load the dat_long table
load(paste0("data/processed/", project_name, "/dat_synth.Rdata"))
start_year = as.numeric(start_year)
synth_dat <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year),
D = ifelse(treated ==1 & year >= start_year, 1, 0))%>%
rename(Y = outcome_var)%>%
select(ID, Y, D, year, covariates)
results_microsynth <- data.frame()
for(covariate in covariates){
my_predictors <- covariates[covariates != covariate]
out_microsynth <- microsynth(as.data.frame(synth_dat),
idvar="ID", timevar="year", intvar="D",
start.pre=1,
end.pre=(start_year - 1),
end.post=22,
match.out="Y", match.covar=my_predictors,
result.var="Y",
test="two-sided",
perm=250, jack=FALSE
, check.feas=TRUE, use.backup=TRUE
)
results_microsynth <- out_microsynth$Results$`22` %>%
as.data.frame()%>%
mutate(project = project_name,
ATT = Trt - Con,
se = abs(ATT/qnorm(Perm.pVal)),
excluded_cov = covariate,
synth_method = "traditional SC")%>%
select(project, ATT, se, excluded_cov, synth_method)%>%
rbind(results_microsynth)
}
return(results_microsynth)
results_microsynth
View(synth_dat)
View(dat_long)
process_synth_data("agrocortex")
library(here)
process_synth_data <- function(project_name) {
library(tidyverse)
library(zoo)
library(tidyquant)
# Define the base file path
base_path <- paste0("data/raw/", project_name, "/", project_name, "_exp/")
# Set starting point
forest_2000 <- read_csv(paste0(base_path, "/forest_2000_", project_name, "_buffers.csv")) %>%
select(-c(".geo")) %>%
rename(treecover_2000 = "sum") %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
dat <- forest_2000
# Now, do the rest of the years (1 through 22)
for (i in 1:22) {
loss <- read_csv(paste0(base_path, "/loss_", sprintf("%02d", i+2000), "_", project_name, "_buffers.csv")) %>%
select(-c(".geo")) %>%
rename(!!paste0("loss_", sprintf("%02d", i)) := "sum") %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
dat <- dat %>% left_join(loss)
}
# Clean locations data set too
locations <- read_csv(paste0(base_path, "/buffers_with_mean_citydist.csv")) %>%
select(-c(".geo")) %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
# ... and append it to dataframe
dat <- dat %>% left_join(locations)
# View(dat)
dat_long <- dat %>% mutate(ID = row_number()) %>%
pivot_longer(cols = loss_01:loss_22,
names_to = "year",
names_prefix = "loss_",
values_to = "loss") %>%
group_by(ID) %>%
arrange(year, .by_group = TRUE) %>%
mutate(cum_loss = cumsum(loss),
treecover_remaining = treecover_2000 - cum_loss,
year = as.numeric(year)) %>%
rename(elevation = be75)
View(dat_long)
# Save the Rdata file
# there may be other .Rdata files in the /processed/ directory, these are outdated.
# from now on (dec 2023), the final dataframe after processing will be saved as
# dat_<method>.Rdata
save(dat_long, file = paste0("data/processed/", project_name, "/dat_synth.Rdata"))
# also write it as a CSV (in case this is needed in the future)
write.csv(dat_long, paste0("data/processed/", project_name, "/dat_synth.csv"))
}
process_synth_data("agrocortex")
# Set starting point
forest_2000 <- read_csv(paste0(base_path, "/forest_2000_", project_name, "_buffers.csv")) %>%
select(-c(".geo")) %>%
rename(treecover_2000 = "sum") %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
process_synth_data <- function(project_name) {
library(tidyverse)
library(zoo)
library(tidyquant)
# Define the base file path
base_path <- paste0("data/raw/", project_name, "/", project_name, "_exp/")
# Set starting point
forest_2000 <- read_csv(paste0(base_path, "/forest_2000_", project_name, "_buffers.csv")) %>%
select(-c(".geo")) %>%
rename(treecover_2000 = "sum") %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
dat <- forest_2000
# Now, do the rest of the years (1 through 22)
for (i in 1:22) {
loss <- read_csv(paste0(base_path, "/loss_", sprintf("%02d", i+2000), "_", project_name, "_buffers.csv")) %>%
select(-c(".geo")) %>%
rename(!!paste0("loss_", sprintf("%02d", i)) := "sum") %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
dat <- dat %>% left_join(loss)
}
# Clean locations data set too
locations <- read_csv(paste0(base_path, "/buffers_with_mean_citydist.csv")) %>%
select(-c(".geo")) %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
# ... and append it to dataframe
dat <- dat %>% left_join(locations)
# View(dat)
dat_long <- dat %>% mutate(ID = row_number()) %>%
pivot_longer(cols = loss_01:loss_22,
names_to = "year",
names_prefix = "loss_",
values_to = "loss") %>%
group_by(ID) %>%
arrange(year, .by_group = TRUE) %>%
mutate(cum_loss = cumsum(loss),
treecover_remaining = treecover_2000 - cum_loss,
year = as.numeric(year)) %>%
rename(elevation = be75)
View(dat_long)
# Save the Rdata file
# there may be other .Rdata files in the /processed/ directory, these are outdated.
# from now on (dec 2023), the final dataframe after processing will be saved as
# dat_<method>.Rdata
save(dat_long, file = paste0("data/processed/", project_name, "/dat_synth.Rdata"))
# also write it as a CSV (in case this is needed in the future)
write.csv(dat_long, paste0("data/processed/", project_name, "/dat_synth.csv"))
}
View(dat_long)
# Author: Originally by Rachel, then modified by Albert (10/03/2023), and again by Henry (12/31/2023)
# Date: 12/31/2023 (most recent)
# Purpose: Runs synthetic controls logic
library(tidyverse)
library(zoo)
library(tidyquant)
library(microsynth)
# NOTE: need to add function parameters for all the different things you can tweak for
# synthetic controls (i.e. all the different possible combinations of running it)
project_name <- "agrocortex"
start_year <- 14
outcome_var <- "cum_loss"
covariates <- c("treecover_2000",
"hillshade",
"aspect",
"elevation",
"slope"
)
# load the dat_long table
load(paste0("data/processed/", project_name, "/dat_synth.Rdata"))
start_year = as.numeric(start_year)
synth_dat <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year),
D = ifelse(treated == 1 & year >= start_year, 1, 0))%>%
rename(Y = outcome_var)%>%
select(ID, Y, D, year, covariates)
results_microsynth <- data.frame()
for(covariate in covariates){
my_predictors <- covariates[covariates != covariate]
out_microsynth <- microsynth(as.data.frame(synth_dat),
idvar="ID", timevar="year", intvar="D",
start.pre=1,
end.pre=(start_year - 1),
end.post=22,
match.out="Y", match.covar=my_predictors,
result.var="Y",
test="two-sided",
perm=250, jack=FALSE
, check.feas=TRUE, use.backup=TRUE
)
results_microsynth <- out_microsynth$Results$`22` %>%
as.data.frame()%>%
mutate(project = project_name,
ATT = Trt - Con,
se = abs(ATT/qnorm(Perm.pVal)),
excluded_cov = covariate,
synth_method = "traditional SC")%>%
select(project, ATT, se, excluded_cov, synth_method)%>%
rbind(results_microsynth)
}

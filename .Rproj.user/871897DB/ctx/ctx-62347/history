time.predictors.prior = c(1:8),
time.optimize.ssr     = c(1:9),
time.plot             = c(1:22)
)
synth_out <- synth(data.prep.obj = dataprep.out)
control_units <- control_units[1:100]
# treatment variable is called "treated"
# time variable is year
# outcome variable is loss
dataprep.out <-
dataprep(foo = dat_long,
predictors = c("accessibility","treecover_2000","elevation","slope"),
dependent     = "treecover_remaining",
unit.variable = "ID",
time.variable = "year",
# unit.names.variable = "system:index",
treatment.identifier  = treated_unit,
controls.identifier   = control_units,
time.predictors.prior = c(1:8),
time.optimize.ssr     = c(1:9),
time.plot             = c(1:22)
)
synth_out <- synth(data.prep.obj = dataprep.out)
system.time(synth_out <- synth(data.prep.obj = dataprep.out))
(control_units <- dat_long %>% filter(treated == 0) %>% pull(ID) %>% unique())
control_units <- control_units[1:200]
# treatment variable is called "treated"
# time variable is year
# outcome variable is loss
dataprep.out <-
dataprep(foo = dat_long,
predictors = c("accessibility","treecover_2000","elevation","slope"),
dependent     = "treecover_remaining",
unit.variable = "ID",
time.variable = "year",
# unit.names.variable = "system:index",
treatment.identifier  = treated_unit,
controls.identifier   = control_units,
time.predictors.prior = c(1:8),
time.optimize.ssr     = c(1:9),
time.plot             = c(1:22)
)
system.time(synth_out <- synth(data.prep.obj = dataprep.out))
control_units <- control_units[1:300]
(control_units <- dat_long %>% filter(treated == 0) %>% pull(ID) %>% unique())
control_units <- control_units[1:300]
# treatment variable is called "treated"
# time variable is year
# outcome variable is loss
dataprep.out <-
dataprep(foo = dat_long,
predictors = c("accessibility","treecover_2000","elevation","slope"),
dependent     = "treecover_remaining",
unit.variable = "ID",
time.variable = "year",
# unit.names.variable = "system:index",
treatment.identifier  = treated_unit,
controls.identifier   = control_units,
time.predictors.prior = c(1:8),
time.optimize.ssr     = c(1:9),
time.plot             = c(1:22)
)
system.time(synth_out <- synth(data.prep.obj = dataprep.out))
path.plot(synth_out, dataprep.out,Ylab = 'Treecover Remaining')
gaps.plot(synth_out, dataprep.out)
control_units <- control_units[1:200]
# treatment variable is called "treated"
# time variable is year
# outcome variable is loss
dataprep.out <-
dataprep(foo = dat_long,
predictors = c("accessibility","treecover_2000","elevation","slope"),
dependent     = "loss",
unit.variable = "ID",
time.variable = "year",
# unit.names.variable = "system:index",
treatment.identifier  = treated_unit,
controls.identifier   = control_units,
time.predictors.prior = c(1:8),
time.optimize.ssr     = c(1:9),
time.plot             = c(1:22)
)
system.time(synth_out <- synth(data.prep.obj = dataprep.out))
path.plot(synth_out, dataprep.out,Ylab = 'Treecover Remaining')
gaps.plot(synth_out, dataprep.out)
### This gets synthetic control donor areas for Florestal
library(tidyverse)
library(zoo)
library(tidyquant)
forest_2000 <- read_csv("data/raw/florestal/florestal_exp/forest_2000_floresta_buffers.csv") %>%
select(-c(".geo")) %>%
rename(treecover_2000 = "sum") %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_01 <- read_csv("data/raw/florestal/florestal_exp/loss_2001_floresta_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_01 = "sum") #%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
# Rachel - Florestal Santa Maria Synthetic Controls
library(Synth)
library(tidyverse)
library(zoo)
library(tidyquant)
# I assume this is the dataframe we use
load("data/processed/florestal/dat_synth.Rdata")
# look at the data
head(dat_long)
dat_long <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year))
class(dat_long)
(treated_unit <- dat_long %>% filter(treated == 1) %>% pull(ID) %>% unique())
(control_units <- dat_long %>% filter(treated == 0) %>% pull(ID) %>% unique())
# treatment variable is called "treated"
# time variable is year
# outcome variable is loss
dataprep.out <-
dataprep(foo = dat_long,
predictors = c("accessibility","treecover_2000","elevation","slope"),
dependent     = "treecover_remaining",
unit.variable = "ID",
time.variable = "year",
# unit.names.variable = "system:index",
treatment.identifier  = treated_unit,
controls.identifier   = control_units,
time.predictors.prior = c(1:8),
time.optimize.ssr     = c(1:9),
time.plot             = c(1:22)
)
synth_out <- synth(data.prep.obj = dataprep.out)
# Rachel - Florestal Santa Maria Synthetic Controls
library(Synth)
library(tidyverse)
library(zoo)
library(tidyquant)
# I assume this is the dataframe we use
load("data/processed/florestal/dat_synth.Rdata")
# look at the data
head(dat_long)
dat_long <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year))
class(dat_long)
(treated_unit <- dat_long %>% filter(treated == 1) %>% pull(ID) %>% unique())
(control_units <- dat_long %>% filter(treated == 0) %>% pull(ID) %>% unique())
control_units <- 1:500
# treatment variable is called "treated"
# time variable is year
# outcome variable is loss
dataprep.out <-
dataprep(foo = dat_long,
predictors = c("accessibility","treecover_2000","elevation","slope"),
dependent     = "treecover_remaining",
unit.variable = "ID",
time.variable = "year",
# unit.names.variable = "system:index",
treatment.identifier  = treated_unit,
controls.identifier   = control_units,
time.predictors.prior = c(1:8),
time.optimize.ssr     = c(1:9),
time.plot             = c(1:22)
)
synth_out <- synth(data.prep.obj = dataprep.out)
# Rachel - Florestal Santa Maria Synthetic Controls
library(Synth)
library(tidyverse)
library(zoo)
library(tidyquant)
# I assume this is the dataframe we use
load("data/processed/florestal/dat_synth.Rdata")
# look at the data
head(dat_long)
dat_long <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year))
class(dat_long)
(treated_unit <- dat_long %>% filter(treated == 1) %>% pull(ID) %>% unique())
(control_units <- dat_long %>% filter(treated == 0) %>% pull(ID) %>% unique())
control_units <- 1:200
# treatment variable is called "treated"
# time variable is year
# outcome variable is loss
dataprep.out <-
dataprep(foo = dat_long,
predictors = c("accessibility","treecover_2000","elevation","slope"),
dependent     = "treecover_remaining",
unit.variable = "ID",
time.variable = "year",
# unit.names.variable = "system:index",
treatment.identifier  = treated_unit,
controls.identifier   = control_units,
time.predictors.prior = c(1:8),
time.optimize.ssr     = c(1:9),
time.plot             = c(1:22)
)
synth_out <- synth(data.prep.obj = dataprep.out)
path.plot(synth_out, dataprep.out,Ylab = 'Treecover Remaining')
gaps.plot(synth_out, dataprep.out)
# Rachel - Agrocortex Synthetic Controls
library(Synth)
library(tidyverse)
library(zoo)
library(tidyquant)
# I assume this is the dataframe we use
load("data/processed/agrocortex/dat_synth.Rdata")
# look at the data
head(dat_long)
dat_long <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year))
class(dat_long)
(treated_unit <- dat_long %>% filter(treated == 1) %>% pull(ID) %>% unique())
(control_units <- dat_long %>% filter(treated == 0) %>% pull(ID) %>% unique())
control_units <- 1:200
# treatment variable is called "treated"
# time variable is year
# outcome variable is loss
dataprep.out <-
dataprep(foo = dat_long,
predictors = c("accessibility","treecover_2000","elevation","slope"),
dependent     = "treecover_remaining",
unit.variable = "ID",
time.variable = "year",
# unit.names.variable = "system:index",
treatment.identifier  = treated_unit,
controls.identifier   = control_units,
time.predictors.prior = c(1:8),
time.optimize.ssr     = c(1:9),
time.plot             = c(1:22)
)
View(dataprep.out)
# This gets the synthetic control donor areas for Agrocortex
library(tidyverse)
library(zoo)
library(tidyquant)
forest_2000 <- read_csv("data/raw/agrocortex/agrocortex_exp/forest_2000_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(treecover_2000 = "sum") %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_01 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2001_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_01 = "sum") %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
# This gets the synthetic control donor areas for Agrocortex
library(tidyverse)
library(zoo)
library(tidyquant)
forest_2000 <- read_csv("data/raw/agrocortex/agrocortex_exp/forest_2000_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(treecover_2000 = "sum") %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_01 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2001_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_01 = "sum") %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_02 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2002_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_02 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_03 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2003_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_03 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_04 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2004_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_04 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_05 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2005_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_05 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_06 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2006_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_06 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_07 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2007_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_07 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_08 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2008_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_08 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_09 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2009_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_09 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_10 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2010_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_10 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_11 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2011_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_11 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_12 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2012_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_12 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_13 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2013_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_13 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_14 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2014_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_14 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_15 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2015_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_15 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_16 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2016_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_16 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_17 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2017_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_17 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_18 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2018_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_18 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_19 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2019_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_19 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_20 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2020_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_20 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_21 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2021_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_21 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
loss_22 <- read_csv("data/raw/agrocortex/agrocortex_exp/loss_2022_agrocortex_buffers.csv") %>%
select(-c(".geo")) %>%
rename(loss_22 = "sum")%>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
locations <- read_csv("data/raw/agrocortex/agrocortex_exp/buffers_with_mean_citydist.csv") %>%
select(-c(".geo")) %>%
mutate(treated = ifelse(str_sub(`system:index`, start = 1, end = 1) == "2", 1, 0))
dat <- forest_2000 %>%
left_join(loss_01) %>%
left_join(loss_02) %>%
left_join(loss_03) %>%
left_join(loss_04) %>%
left_join(loss_05) %>%
left_join(loss_06) %>%
left_join(loss_07) %>%
left_join(loss_08) %>%
left_join(loss_09) %>%
left_join(loss_10) %>%
left_join(loss_11) %>%
left_join(loss_12) %>%
left_join(loss_13) %>%
left_join(loss_14) %>%
left_join(loss_15) %>%
left_join(loss_16) %>%
left_join(loss_17) %>%
left_join(loss_18) %>%
left_join(loss_19) %>%
left_join(loss_20) %>%
left_join(loss_21) %>%
left_join(loss_22) %>%
left_join(locations)
dat_long <- dat %>% #mutate(ID = row_number()) %>%
pivot_longer(cols = loss_01:loss_22,
names_to = "year",
names_prefix = "loss_",
values_to = "loss") %>%
group_by(ID) %>%
arrange(year, .by_group = TRUE) %>%
mutate(cum_loss = cumsum(loss),
treecover_remaining = treecover_2000 - cum_loss,
year = as.numeric(year)) %>%
rename(elevation = be75)
save(dat_long, file = "data/processed/agrocortex/dat_synth.Rdata")
write.csv(dat_long, "data/processed/agrocortex/dat_synth.csv")
# Rachel - Agrocortex Synthetic Controls
library(Synth)
library(tidyverse)
library(zoo)
library(tidyquant)
# I assume this is the dataframe we use
load("data/processed/agrocortex/dat_synth.Rdata")
# look at the data
head(dat_long)
dat_long <- as.data.frame(dat_long) %>%
mutate(year = as.numeric(year))
class(dat_long)
(treated_unit <- dat_long %>% filter(treated == 1) %>% pull(ID) %>% unique())
(control_units <- dat_long %>% filter(treated == 0) %>% pull(ID) %>% unique())
control_units <- 1:200
# treatment variable is called "treated"
# time variable is year
# outcome variable is loss
dataprep.out <-
dataprep(foo = dat_long,
predictors = c("accessibility","treecover_2000","elevation","slope"),
dependent     = "treecover_remaining",
unit.variable = "ID",
time.variable = "year",
# unit.names.variable = "system:index",
treatment.identifier  = treated_unit,
controls.identifier   = control_units,
time.predictors.prior = c(1:8),
time.optimize.ssr     = c(1:9),
time.plot             = c(1:22)
)
synth_out <- synth(data.prep.obj = dataprep.out)
path.plot(synth_out, dataprep.out,Ylab = 'Treecover Remaining')
gaps.plot(synth_out, dataprep.out)
# Converting ADPML KML file into shape file
# installing packages
install.packages("rworldmap")
install.packages("raster")
install.packages("rgdal")
install.packages("plotKML")
install.packages("maptools")
install.packages("sp")
# loading the library
library(raster)
library(rgdal)
library(plotKML)
library(rworldmap)
library(sp)
# read kml file
require(sf)
kml <- read_sf("data/raw/adpml/adpml (1) (1).kml")
kml <- read_sf("data/raw/adpml/adpml.kml")
require(sf)
kml <- read_sf("data/raw/adpml/adpml.kml")
shape <- read_sf(dsn = "data/processed/adpml/adpml_1_1-polygon.shp", layer = "adpml_1_1-polygon"
# convert to shape file
require(sf)
View(kml)
# Converting ADPML KML file into shape file
# installing packages
install.packages("rworldmap")
install.packages("raster")
install.packages("rgdal")
install.packages("plotKML")
install.packages("maptools")
install.packages("sp")
# loading the library
library(raster)
library(rgdal)
library(plotKML)
library(rworldmap)
library(sp)
# read kml file
require(sf)
kml <- read_sf("data/raw/adpml/adpml.kml")
# convert to shape file
require(sf)
shape <- read_sf(dsn = "data/processed/adpml/adpml_1_1-polygon.shp", layer = "adpml_1_1-polygon"
install.packages("rworldmap")
install.packages("raster")
install.packages("rgdal")
install.packages("plotKML")
install.packages("maptools")
install.packages("sp")
# Converting ADPML KML file into shape file
# installing packages
install.packages("rworldmap")
install.packages("raster")
install.packages("rgdal")
install.packages("plotKML")
install.packages("maptools")
install.packages("sp")
# loading the library
library(raster)
library(rgdal)
library(plotKML)
library(rworldmap)
library(sp)
# read kml file
require(sf)
kml <- read_sf("data/raw/adpml/adpml.kml")
# convert to shape file
require(sf)
shape <- read_sf(dsn = "data/processed/adpml/adpml_1_1-polygon.shp", layer = "adpml_1_1-polygon"
install.packages("rworldmap")
install.packages("raster")
install.packages("rgdal")
install.packages("plotKML")
install.packages("maptools")
install.packages("sp")
install.packages("sp")
install.packages("sp")
library(sp)
library(rworldmap)
# read kml file
require(sf)
kml <- read_sf("data/raw/adpml/adpml.kml")
# convert to shape file
require(sf)
shape <- read_sf(dsn = "data/processed/adpml/adpml_1_1-polygon.shp", layer = "adpml_1_1-polygon"
shape <- read_sf(dsn = "data/processed/agrocortex/agrocortex_1_1-polygon.shp", layer = "agrocortex_1_1-polygon")
# Read in KML, convert to SHP file
# installing packages
install.packages("rworldmap")
install.packages("raster")
install.packages("rgdal")
install.packages("plotKML")
install.packages("maptools")
install.packages("sp")
# loading the library
library(raster)
library(rgdal)
library(plotKML)
library(rworldmap)
library(sp)
# read kml file
require(sf)
kml <- read_sf("data/raw/agrocortex/agrocortex (1) (1).kml")

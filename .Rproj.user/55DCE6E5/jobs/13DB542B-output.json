[1,"── \u001B[1mAttaching core tidyverse packages\u001B[22m ──────────────────────── tidyverse 2.0.0 ──\n"]
[1,"\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.4\n"]
[1,"\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.0\n"]
[1,"\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n"]
[1,"── \u001B[1mConflicts\u001B[22m ────────────────────────────────────────── tidyverse_conflicts() ──\n"]
[1,"\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n"]
[1,"\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n"]
[1,"\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n"]
[2,"\nAttaching package: ‘dplyr’\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\nhere() starts at /Users/nicholaswu/Library/CloudStorage/GoogleDrive-nicholas.wu@yale.edu/.shortcut-targets-by-id/1rdr5l5G0qIwemvG4qzNBH4KvxTHwoEBJ/REDD_specification_curve\n\nAttaching package: ‘zoo’\n\nThe following objects are masked from ‘package:base’:\n\n    as.Date, as.Date.numeric\n\nLoading required package: PerformanceAnalytics\nLoading required package: xts\n\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's protected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n\nAttaching package: ‘xts’\n\nThe following objects are masked from ‘package:dplyr’:\n\n    first, last\n\n\nAttaching package: ‘PerformanceAnalytics’\n\nThe following object is masked from ‘package:graphics’:\n\n    legend\n\nLoading required package: quantmod\nLoading required package: TTR\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \nError: 'data/raw/adpml/adpml_exp//forest_2000_adpml_points.csv' does not exist in current working directory ('/Users/nicholaswu/Library/CloudStorage/GoogleDrive-nicholas.wu@yale.edu/.shortcut-targets-by-id/1rdr5l5G0qIwemvG4qzNBH4KvxTHwoEBJ/REDD_specification_curve/code/methods/causal_forests').\nExecution halted\n"]
